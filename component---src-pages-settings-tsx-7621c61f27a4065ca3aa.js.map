{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/MenuItem/MenuItem.js","webpack:///./src/pages/settings.tsx"],"names":["props","ref","tabIndex","classes","className","_props$component","component","_props$disableGutters","disableGutters","ListItemClasses","_props$role","role","selected","tabIndexProp","other","disabled","undefined","ListItem","button","dense","root","gutters","withStyles","theme","typography","body1","minHeight","paddingTop","paddingBottom","boxSizing","width","overflow","whiteSpace","breakpoints","up","body2","name","useConfig","createPersistedState","SettingsPage","location","defaultSettings","settings","setSettings","Layout","noMeta","noEdit","noToC","title","Grid","container","spacing","item","FormControl","InputLabel","Select","value","darkMode","type","onChange","e","newSettings","target"],"mappings":"mSAmCI,EAAW,cAAiB,SAAkBA,EAAOC,GACvD,IAaIC,EAbAC,EAAUH,EAAMG,QAChBC,EAAYJ,EAAMI,UAClBC,EAAmBL,EAAMM,UACzBA,OAAiC,IAArBD,EAA8B,KAAOA,EACjDE,EAAwBP,EAAMQ,eAC9BA,OAA2C,IAA1BD,GAA2CA,EAC5DE,EAAkBT,EAAMS,gBACxBC,EAAcV,EAAMW,KACpBA,OAAuB,IAAhBD,EAAyB,WAAaA,EAC7CE,EAAWZ,EAAMY,SACjBC,EAAeb,EAAME,SACrBY,EAAQ,YAAyBd,EAAO,CAAC,UAAW,YAAa,YAAa,iBAAkB,kBAAmB,OAAQ,WAAY,aAQ3I,OAJKA,EAAMe,WACTb,OAA4Bc,IAAjBH,EAA6BA,GAAgB,GAGtC,gBAAoBI,EAAA,EAAU,YAAS,CACzDC,QAAQ,EACRP,KAAMA,EACNT,SAAUA,EACVI,UAAWA,EACXM,SAAUA,EACVJ,eAAgBA,EAChBL,QAAS,YAAS,CAChBgB,MAAOhB,EAAQgB,OACdV,GACHL,UAAW,YAAKD,EAAQiB,KAAMhB,EAAWQ,GAAYT,EAAQS,UAAWJ,GAAkBL,EAAQkB,SAClGpB,IAAKA,GACJa,OAGU,SAAAQ,EAAA,IA/DK,SAAgBC,GAClC,MAAO,CAELH,KAAM,YAAS,YAAS,GAAIG,EAAMC,WAAWC,OAAQ,GAAI,YAAgB,CACvEC,UAAW,GACXC,WAAY,EACZC,cAAe,EACfC,UAAW,aACXC,MAAO,OACPC,SAAU,SACVC,WAAY,UACXT,EAAMU,YAAYC,GAAG,MAAO,CAC7BR,UAAW,UAKbL,QAAS,GAGTT,SAAU,GAGVO,MAAO,YAAS,YAAS,GAAII,EAAMC,WAAWW,OAAQ,GAAI,CACxDT,UAAW,YAuCiB,CAChCU,KAAM,eADO,CAEZ,G,uuBC/DH,IAAMC,EAAYC,YAAqB,YA0CxBC,UAxCf,SAAuBvC,GAAoC,IACjDwC,EAAaxC,EAAbwC,SADiD,EAEzBH,EAAUI,KAAnCC,EAFkD,KAExCC,EAFwC,KAIzD,OAGE,kBAACC,EAAA,EAAD,CACEJ,SAAUA,EACVK,OAAO,OACPC,OAAO,OACPC,MAAM,OACNC,MAAM,MAEN,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACC,EAAA,EAAD,CACEC,MAAOd,EAASe,SAASC,KACzBC,SAAU,SAACC,GAjBD,IAACC,IAkBK,CACZJ,SAAU,CACRC,KAAME,EAAEE,OAAON,QApBab,EAAY,EAAD,KAAMF,KAAoBoB,MAyBvE,kBAAC,EAAD,CAAUL,MAAM,mBAAhB,QACA,kBAAC,EAAD,CAAUA,MAAM,aAAhB,QACA,kBAAC,EAAD,CAAUA,MAAM,aAAhB,QACA,kBAAC,EAAD,CAAUA,MAAM,cAAhB","file":"component---src-pages-settings-tsx-7621c61f27a4065ca3aa.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListItem from '../ListItem';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends(_extends({}, theme.typography.body1), {}, _defineProperty({\n      minHeight: 48,\n      paddingTop: 6,\n      paddingBottom: 6,\n      boxSizing: 'border-box',\n      width: 'auto',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap'\n    }, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    })),\n    // TODO v5: remove\n\n    /* Styles applied to the root element if `disableGutters={false}`. */\n    gutters: {},\n\n    /* Styles applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Styles applied to the root element if dense. */\n    dense: _extends(_extends({}, theme.typography.body2), {}, {\n      minHeight: 'auto'\n    })\n  };\n};\nvar MenuItem = React.forwardRef(function MenuItem(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      ListItemClasses = props.ListItemClasses,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'menuitem' : _props$role,\n      selected = props.selected,\n      tabIndexProp = props.tabIndex,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"ListItemClasses\", \"role\", \"selected\", \"tabIndex\"]);\n\n  var tabIndex;\n\n  if (!props.disabled) {\n    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;\n  }\n\n  return /*#__PURE__*/React.createElement(ListItem, _extends({\n    button: true,\n    role: role,\n    tabIndex: tabIndex,\n    component: component,\n    selected: selected,\n    disableGutters: disableGutters,\n    classes: _extends({\n      dense: classes.dense\n    }, ListItemClasses),\n    className: clsx(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiMenuItem'\n})(MenuItem);","import Grid from '@material-ui/core/Grid'\nimport React from 'react'\nimport createPersistedState from 'use-persisted-state'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport Layout from '../components/Layout'\nimport defaultSettings from '../lib/defaultSettings'\nconst useConfig = createPersistedState('settings')\n\nfunction SettingsPage (props: {location: string}): unknown {\n  const { location } = props\n  const [settings, setSettings] = useConfig(defaultSettings)\n  const updateSetting = (newSettings): void => (setSettings({ ...defaultSettings, ...newSettings }))\n  return (\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    <Layout\n      location={location}\n      noMeta=\"true\"\n      noEdit=\"true\"\n      noToC=\"true\"\n      title=\"设置\"\n    >\n      <Grid container spacing={2}>\n        <Grid item>\n          <FormControl>\n            <InputLabel>夜间模式</InputLabel>\n            <Select\n              value={settings.darkMode.type}\n              onChange={(e) => {\n                updateSetting({\n                  darkMode: {\n                    type: e.target.value,\n                  },\n                })\n              }}\n            >\n              <MenuItem value=\"user-preference\">跟随系统</MenuItem>\n              <MenuItem value=\"scheduled\">定时开启</MenuItem>\n              <MenuItem value=\"always-on\">总是打开</MenuItem>\n              <MenuItem value=\"always-off\">总是关闭</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n    </Layout>\n  )\n}\n\nexport default SettingsPage\n"],"sourceRoot":""}